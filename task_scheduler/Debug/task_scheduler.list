
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ef4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0800109c  0800109c  0001109c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001188  08001188  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08001188  08001188  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001188  08001188  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001188  08001188  00011188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800118c  0800118c  0001118c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000044  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b8  200000b8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b65  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003ae  00000000  00000000  00020c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00020fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000158  00000000  00000000  00021148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c35  00000000  00000000  000212a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001519  00000000  00000000  00023ed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000095eb  00000000  00000000  000253ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002e9d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000bc4  00000000  00000000  0002ea2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000074 	.word	0x20000074
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001084 	.word	0x08001084

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000078 	.word	0x20000078
 80001e4:	08001084 	.word	0x08001084

080001e8 <main>:
uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START}; //program counters of tasks
uint32_t task_handlers[MAX_TASKS];
uint8_t current_task = 0; //task1 is running

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80001ec:	f000 f8c6 	bl	800037c <enable_processor_faults>

    init_sheduler_stack(SCHED_STACK_START);
 80001f0:	480c      	ldr	r0, [pc, #48]	; (8000224 <main+0x3c>)
 80001f2:	f000 f877 	bl	80002e4 <init_sheduler_stack>
    task_handlers[0] = (uint32_t) task1_handler;
 80001f6:	4a0c      	ldr	r2, [pc, #48]	; (8000228 <main+0x40>)
 80001f8:	4b0c      	ldr	r3, [pc, #48]	; (800022c <main+0x44>)
 80001fa:	601a      	str	r2, [r3, #0]
    task_handlers[1] = (uint32_t) task2_handler;
 80001fc:	4a0c      	ldr	r2, [pc, #48]	; (8000230 <main+0x48>)
 80001fe:	4b0b      	ldr	r3, [pc, #44]	; (800022c <main+0x44>)
 8000200:	605a      	str	r2, [r3, #4]
    task_handlers[2] = (uint32_t) task3_handler;
 8000202:	4a0c      	ldr	r2, [pc, #48]	; (8000234 <main+0x4c>)
 8000204:	4b09      	ldr	r3, [pc, #36]	; (800022c <main+0x44>)
 8000206:	609a      	str	r2, [r3, #8]
    task_handlers[3] = (uint32_t) task4_handler;
 8000208:	4a0b      	ldr	r2, [pc, #44]	; (8000238 <main+0x50>)
 800020a:	4b08      	ldr	r3, [pc, #32]	; (800022c <main+0x44>)
 800020c:	60da      	str	r2, [r3, #12]

    init_task_stack();
 800020e:	f000 f86f 	bl	80002f0 <init_task_stack>

    init_systick_timer(TICK_HZ);
 8000212:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000216:	f000 f831 	bl	800027c <init_systick_timer>

    switch_sp_to_psp();
 800021a:	f000 f907 	bl	800042c <switch_sp_to_psp>

    task1_handler();
 800021e:	f000 f80d 	bl	800023c <task1_handler>

	for(;;);
 8000222:	e7fe      	b.n	8000222 <main+0x3a>
 8000224:	2001f000 	.word	0x2001f000
 8000228:	0800023d 	.word	0x0800023d
 800022c:	20000090 	.word	0x20000090
 8000230:	0800024d 	.word	0x0800024d
 8000234:	0800025d 	.word	0x0800025d
 8000238:	0800026d 	.word	0x0800026d

0800023c <task1_handler>:
}

void task1_handler(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task 1 \n");
 8000240:	4801      	ldr	r0, [pc, #4]	; (8000248 <task1_handler+0xc>)
 8000242:	f000 fa95 	bl	8000770 <puts>
 8000246:	e7fb      	b.n	8000240 <task1_handler+0x4>
 8000248:	0800109c 	.word	0x0800109c

0800024c <task2_handler>:
	}
}

void task2_handler(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task 2 \n");
 8000250:	4801      	ldr	r0, [pc, #4]	; (8000258 <task2_handler+0xc>)
 8000252:	f000 fa8d 	bl	8000770 <puts>
 8000256:	e7fb      	b.n	8000250 <task2_handler+0x4>
 8000258:	080010ac 	.word	0x080010ac

0800025c <task3_handler>:
	}
}

void task3_handler(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task 3 \n");
 8000260:	4801      	ldr	r0, [pc, #4]	; (8000268 <task3_handler+0xc>)
 8000262:	f000 fa85 	bl	8000770 <puts>
 8000266:	e7fb      	b.n	8000260 <task3_handler+0x4>
 8000268:	080010bc 	.word	0x080010bc

0800026c <task4_handler>:
	}
}

void task4_handler(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("This is task 4 \n");
 8000270:	4801      	ldr	r0, [pc, #4]	; (8000278 <task4_handler+0xc>)
 8000272:	f000 fa7d 	bl	8000770 <puts>
 8000276:	e7fb      	b.n	8000270 <task4_handler+0x4>
 8000278:	080010cc 	.word	0x080010cc

0800027c <init_systick_timer>:
	}
}

void init_systick_timer(uint32_t tick_hz)
{
 800027c:	b480      	push	{r7}
 800027e:	b087      	sub	sp, #28
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014; //pointer to SysTick Reload Value Register
 8000284:	4b14      	ldr	r3, [pc, #80]	; (80002d8 <init_systick_timer+0x5c>)
 8000286:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010; //pointer to SysTick Control and Status Register
 8000288:	4b14      	ldr	r3, [pc, #80]	; (80002dc <init_systick_timer+0x60>)
 800028a:	613b      	str	r3, [r7, #16]
	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz) - 1; //N-1 cycles, interrupt happens when register reloads
 800028c:	4a14      	ldr	r2, [pc, #80]	; (80002e0 <init_systick_timer+0x64>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	fbb2 f3f3 	udiv	r3, r2, r3
 8000294:	3b01      	subs	r3, #1
 8000296:	60fb      	str	r3, [r7, #12]

	// Clear value of SVR
	*pSRVR &= ~(0x00FFFFFFFF); //clearing value of register; mask taken from datasheet
 8000298:	697b      	ldr	r3, [r7, #20]
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]

	//load value into SVR
	*pSRVR |= count_value; //load value into register
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	431a      	orrs	r2, r3
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	601a      	str	r2, [r3, #0]

	// do some settings
	*pSCSR |= (1 << 1); //Enables SysTick exception request; set bit 1 to 1
 80002aa:	693b      	ldr	r3, [r7, #16]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f043 0202 	orr.w	r2, r3, #2
 80002b2:	693b      	ldr	r3, [r7, #16]
 80002b4:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1 << 2); //Enables SysTick TICKINT, interrupt after reaching 0 ; set bit 2 to 1
 80002b6:	693b      	ldr	r3, [r7, #16]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f043 0204 	orr.w	r2, r3, #4
 80002be:	693b      	ldr	r3, [r7, #16]
 80002c0:	601a      	str	r2, [r3, #0]
	//enable the systick
	*pSCSR |= (1 << 0); //Enables SysTick; set bit 0 to 1
 80002c2:	693b      	ldr	r3, [r7, #16]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	f043 0201 	orr.w	r2, r3, #1
 80002ca:	693b      	ldr	r3, [r7, #16]
 80002cc:	601a      	str	r2, [r3, #0]
	// look for Systick_Handler in startup_stm32f407vgtx.s file
}
 80002ce:	bf00      	nop
 80002d0:	371c      	adds	r7, #28
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	e000e014 	.word	0xe000e014
 80002dc:	e000e010 	.word	0xe000e010
 80002e0:	00f42400 	.word	0x00f42400

080002e4 <init_sheduler_stack>:

///Initialize scheduler stack pointer (MSP)//
__attribute__((naked)) void init_sheduler_stack(uint32_t sched_top_of_stack)
{
 80002e4:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0": : "r" (sched_top_of_stack) : );
 80002e6:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 80002ea:	4770      	bx	lr
}
 80002ec:	bf00      	nop
	...

080002f0 <init_task_stack>:

void init_task_stack(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b085      	sub	sp, #20
 80002f4:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	for(int i=0; i< MAX_TASKS; i++)
 80002f6:	2300      	movs	r3, #0
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	e032      	b.n	8000362 <init_task_stack+0x72>
	{
		pPSP = (uint32_t*) psp_of_tasks[i];
 80002fc:	4a1d      	ldr	r2, [pc, #116]	; (8000374 <init_task_stack+0x84>)
 80002fe:	68bb      	ldr	r3, [r7, #8]
 8000300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000304:	60fb      	str	r3, [r7, #12]
		pPSP--;
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	3b04      	subs	r3, #4
 800030a:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; // 0x00100000; value from datasheet; T bit always 1
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000312:	601a      	str	r2, [r3, #0]

		//PC
		pPSP--;
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	3b04      	subs	r3, #4
 8000318:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 800031a:	4a17      	ldr	r2, [pc, #92]	; (8000378 <init_task_stack+0x88>)
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	601a      	str	r2, [r3, #0]

		//LR
		pPSP--;
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	3b04      	subs	r3, #4
 800032a:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f06f 0202 	mvn.w	r2, #2
 8000332:	601a      	str	r2, [r3, #0]

		for(int j = 0; j<13; j++)
 8000334:	2300      	movs	r3, #0
 8000336:	607b      	str	r3, [r7, #4]
 8000338:	e008      	b.n	800034c <init_task_stack+0x5c>
		{
			pPSP--;
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	3b04      	subs	r3, #4
 800033e:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
		for(int j = 0; j<13; j++)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	3301      	adds	r3, #1
 800034a:	607b      	str	r3, [r7, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	2b0c      	cmp	r3, #12
 8000350:	ddf3      	ble.n	800033a <init_task_stack+0x4a>
		}

		psp_of_tasks[i] = (uint32_t) pPSP;
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	4907      	ldr	r1, [pc, #28]	; (8000374 <init_task_stack+0x84>)
 8000356:	68bb      	ldr	r3, [r7, #8]
 8000358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i< MAX_TASKS; i++)
 800035c:	68bb      	ldr	r3, [r7, #8]
 800035e:	3301      	adds	r3, #1
 8000360:	60bb      	str	r3, [r7, #8]
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	2b03      	cmp	r3, #3
 8000366:	ddc9      	ble.n	80002fc <init_task_stack+0xc>



	}
}
 8000368:	bf00      	nop
 800036a:	bf00      	nop
 800036c:	3714      	adds	r7, #20
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	20000000 	.word	0x20000000
 8000378:	20000090 	.word	0x20000090

0800037c <enable_processor_faults>:

void enable_processor_faults(void)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000382:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <enable_processor_faults+0x38>)
 8000384:	607b      	str	r3, [r7, #4]
	*pSHCSR |= (1<<16); //mem manage
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1<<17); //bus fault
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	601a      	str	r2, [r3, #0]
	*pSHCSR |= (1<<18); //usage fault
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	601a      	str	r2, [r3, #0]
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bc80      	pop	{r7}
 80003b2:	4770      	bx	lr
 80003b4:	e000ed24 	.word	0xe000ed24

080003b8 <get_psp_value>:

uint32_t get_psp_value(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 80003bc:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <get_psp_value+0x18>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	461a      	mov	r2, r3
 80003c2:	4b04      	ldr	r3, [pc, #16]	; (80003d4 <get_psp_value+0x1c>)
 80003c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bc80      	pop	{r7}
 80003ce:	4770      	bx	lr
 80003d0:	200000a0 	.word	0x200000a0
 80003d4:	20000000 	.word	0x20000000

080003d8 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_value;
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <save_psp_value+0x20>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	4619      	mov	r1, r3
 80003e6:	4a05      	ldr	r2, [pc, #20]	; (80003fc <save_psp_value+0x24>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr
 80003f8:	200000a0 	.word	0x200000a0
 80003fc:	20000000 	.word	0x20000000

08000400 <update_next_task>:

void update_next_task(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
	current_task++;
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <update_next_task+0x28>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	3301      	adds	r3, #1
 800040a:	b2da      	uxtb	r2, r3
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <update_next_task+0x28>)
 800040e:	701a      	strb	r2, [r3, #0]
	current_task %= MAX_TASKS; //clever module operand to check if crossed MAX_TASKS
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <update_next_task+0x28>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	f003 0303 	and.w	r3, r3, #3
 8000418:	b2da      	uxtb	r2, r3
 800041a:	4b03      	ldr	r3, [pc, #12]	; (8000428 <update_next_task+0x28>)
 800041c:	701a      	strb	r2, [r3, #0]
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	bc80      	pop	{r7}
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	200000a0 	.word	0x200000a0

0800042c <switch_sp_to_psp>:

__attribute__((naked)) void switch_sp_to_psp(void)
{
	// 1. Initialize the PSP with TASK1 stack start address
	// get the value of psp of current task
	__asm volatile ("PUSH {LR}"); // preserve LR which connects back to main()
 800042c:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 800042e:	f7ff ffc3 	bl	80003b8 <get_psp_value>
	__asm volatile ("MSR PSP, R0"); //initialize PSP
 8000432:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}"); //pops back LR value
 8000436:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0, #0X02");
 800043a:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL, R0");
 800043e:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 8000442:	4770      	bx	lr

}
 8000444:	bf00      	nop

08000446 <SysTick_Handler>:
__attribute__((naked)) void SysTick_Handler(void)
{
	/*Save the context of current task*/

	//1. Get current running task PSP value
	__asm volatile("MRS R0, PSP");
 8000446:	f3ef 8009 	mrs	r0, PSP
	//2. Using that PSP value store SF2(R4 to R11)
	__asm volatile("STMDB R0!, {R4-R11}");
 800044a:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	__asm volatile("PUSH {LR}");
 800044e:	b500      	push	{lr}
	//3. Save the current value of PSP
	__asm volatile("BL save_psp_value");
 8000450:	f7ff ffc2 	bl	80003d8 <save_psp_value>

	/*Retrieve the context of next task*/

	//1. Decide next task to run
	__asm volatile("BL update_next_task");
 8000454:	f7ff ffd4 	bl	8000400 <update_next_task>
	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
 8000458:	f7ff ffae 	bl	80003b8 <get_psp_value>
	//3. Using that PSP value retrieve SF2(r4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
 800045c:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//4. update PSP and exit
	__asm volatile ("MSR PSP, R0");
 8000460:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");
 8000464:	f85d eb04 	ldr.w	lr, [sp], #4
	__asm volatile("BX LR");
 8000468:	4770      	bx	lr

}
 800046a:	bf00      	nop

0800046c <HardFault_Handler>:

void HardFault_Handler(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	printf("Exception : Hardfault\n");
 8000470:	4801      	ldr	r0, [pc, #4]	; (8000478 <HardFault_Handler+0xc>)
 8000472:	f000 f97d 	bl	8000770 <puts>
	while(1);
 8000476:	e7fe      	b.n	8000476 <HardFault_Handler+0xa>
 8000478:	080010dc 	.word	0x080010dc

0800047c <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	printf("Exception : MemManage\n");
 8000480:	4801      	ldr	r0, [pc, #4]	; (8000488 <MemManage_Handler+0xc>)
 8000482:	f000 f975 	bl	8000770 <puts>
	while(1);
 8000486:	e7fe      	b.n	8000486 <MemManage_Handler+0xa>
 8000488:	080010f4 	.word	0x080010f4

0800048c <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
	printf("Exception : BusFault\n");
 8000490:	4801      	ldr	r0, [pc, #4]	; (8000498 <BusFault_Handler+0xc>)
 8000492:	f000 f96d 	bl	8000770 <puts>
	while(1);
 8000496:	e7fe      	b.n	8000496 <BusFault_Handler+0xa>
 8000498:	0800110c 	.word	0x0800110c

0800049c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b086      	sub	sp, #24
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	e00a      	b.n	80004c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004ae:	f3af 8000 	nop.w
 80004b2:	4601      	mov	r1, r0
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	1c5a      	adds	r2, r3, #1
 80004b8:	60ba      	str	r2, [r7, #8]
 80004ba:	b2ca      	uxtb	r2, r1
 80004bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	3301      	adds	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	697a      	ldr	r2, [r7, #20]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	429a      	cmp	r2, r3
 80004ca:	dbf0      	blt.n	80004ae <_read+0x12>
  }

  return len;
 80004cc:	687b      	ldr	r3, [r7, #4]
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3718      	adds	r7, #24
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b086      	sub	sp, #24
 80004da:	af00      	add	r7, sp, #0
 80004dc:	60f8      	str	r0, [r7, #12]
 80004de:	60b9      	str	r1, [r7, #8]
 80004e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	e009      	b.n	80004fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	1c5a      	adds	r2, r3, #1
 80004ec:	60ba      	str	r2, [r7, #8]
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	3301      	adds	r3, #1
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	697a      	ldr	r2, [r7, #20]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	429a      	cmp	r2, r3
 8000502:	dbf1      	blt.n	80004e8 <_write+0x12>
  }
  return len;
 8000504:	687b      	ldr	r3, [r7, #4]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3718      	adds	r7, #24
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}

0800050e <_close>:

int _close(int file)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
}
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000524:	b480      	push	{r7}
 8000526:	b083      	sub	sp, #12
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000534:	605a      	str	r2, [r3, #4]
  return 0;
 8000536:	2300      	movs	r3, #0
}
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr

08000542 <_isatty>:

int _isatty(int file)
{
 8000542:	b480      	push	{r7}
 8000544:	b083      	sub	sp, #12
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800054a:	2301      	movs	r3, #1
}
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	bc80      	pop	{r7}
 8000554:	4770      	bx	lr

08000556 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000556:	b480      	push	{r7}
 8000558:	b085      	sub	sp, #20
 800055a:	af00      	add	r7, sp, #0
 800055c:	60f8      	str	r0, [r7, #12]
 800055e:	60b9      	str	r1, [r7, #8]
 8000560:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000562:	2300      	movs	r3, #0
}
 8000564:	4618      	mov	r0, r3
 8000566:	3714      	adds	r7, #20
 8000568:	46bd      	mov	sp, r7
 800056a:	bc80      	pop	{r7}
 800056c:	4770      	bx	lr
	...

08000570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000578:	4a14      	ldr	r2, [pc, #80]	; (80005cc <_sbrk+0x5c>)
 800057a:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <_sbrk+0x60>)
 800057c:	1ad3      	subs	r3, r2, r3
 800057e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <_sbrk+0x64>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d102      	bne.n	8000592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800058c:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <_sbrk+0x64>)
 800058e:	4a12      	ldr	r2, [pc, #72]	; (80005d8 <_sbrk+0x68>)
 8000590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000592:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <_sbrk+0x64>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4413      	add	r3, r2
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	429a      	cmp	r2, r3
 800059e:	d207      	bcs.n	80005b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005a0:	f000 f846 	bl	8000630 <__errno>
 80005a4:	4603      	mov	r3, r0
 80005a6:	220c      	movs	r2, #12
 80005a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005aa:	f04f 33ff 	mov.w	r3, #4294967295
 80005ae:	e009      	b.n	80005c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <_sbrk+0x64>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <_sbrk+0x64>)
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	4413      	add	r3, r2
 80005be:	4a05      	ldr	r2, [pc, #20]	; (80005d4 <_sbrk+0x64>)
 80005c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005c2:	68fb      	ldr	r3, [r7, #12]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20020000 	.word	0x20020000
 80005d0:	00000400 	.word	0x00000400
 80005d4:	200000a4 	.word	0x200000a4
 80005d8:	200000b8 	.word	0x200000b8

080005dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005dc:	480d      	ldr	r0, [pc, #52]	; (8000614 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e4:	480c      	ldr	r0, [pc, #48]	; (8000618 <LoopForever+0x6>)
  ldr r1, =_edata
 80005e6:	490d      	ldr	r1, [pc, #52]	; (800061c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <LoopForever+0xe>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005ec:	e002      	b.n	80005f4 <LoopCopyDataInit>

080005ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f2:	3304      	adds	r3, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005f8:	d3f9      	bcc.n	80005ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fa:	4a0a      	ldr	r2, [pc, #40]	; (8000624 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005fc:	4c0a      	ldr	r4, [pc, #40]	; (8000628 <LoopForever+0x16>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000600:	e001      	b.n	8000606 <LoopFillZerobss>

08000602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000604:	3204      	adds	r2, #4

08000606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000608:	d3fb      	bcc.n	8000602 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800060a:	f000 f817 	bl	800063c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800060e:	f7ff fdeb 	bl	80001e8 <main>

08000612 <LoopForever>:

LoopForever:
  b LoopForever
 8000612:	e7fe      	b.n	8000612 <LoopForever>
  ldr   r0, =_estack
 8000614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800061c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000620:	08001190 	.word	0x08001190
  ldr r2, =_sbss
 8000624:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000628:	200000b8 	.word	0x200000b8

0800062c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800062c:	e7fe      	b.n	800062c <ADC_IRQHandler>
	...

08000630 <__errno>:
 8000630:	4b01      	ldr	r3, [pc, #4]	; (8000638 <__errno+0x8>)
 8000632:	6818      	ldr	r0, [r3, #0]
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000010 	.word	0x20000010

0800063c <__libc_init_array>:
 800063c:	b570      	push	{r4, r5, r6, lr}
 800063e:	4d0d      	ldr	r5, [pc, #52]	; (8000674 <__libc_init_array+0x38>)
 8000640:	4c0d      	ldr	r4, [pc, #52]	; (8000678 <__libc_init_array+0x3c>)
 8000642:	1b64      	subs	r4, r4, r5
 8000644:	10a4      	asrs	r4, r4, #2
 8000646:	2600      	movs	r6, #0
 8000648:	42a6      	cmp	r6, r4
 800064a:	d109      	bne.n	8000660 <__libc_init_array+0x24>
 800064c:	4d0b      	ldr	r5, [pc, #44]	; (800067c <__libc_init_array+0x40>)
 800064e:	4c0c      	ldr	r4, [pc, #48]	; (8000680 <__libc_init_array+0x44>)
 8000650:	f000 fd18 	bl	8001084 <_init>
 8000654:	1b64      	subs	r4, r4, r5
 8000656:	10a4      	asrs	r4, r4, #2
 8000658:	2600      	movs	r6, #0
 800065a:	42a6      	cmp	r6, r4
 800065c:	d105      	bne.n	800066a <__libc_init_array+0x2e>
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f855 3b04 	ldr.w	r3, [r5], #4
 8000664:	4798      	blx	r3
 8000666:	3601      	adds	r6, #1
 8000668:	e7ee      	b.n	8000648 <__libc_init_array+0xc>
 800066a:	f855 3b04 	ldr.w	r3, [r5], #4
 800066e:	4798      	blx	r3
 8000670:	3601      	adds	r6, #1
 8000672:	e7f2      	b.n	800065a <__libc_init_array+0x1e>
 8000674:	08001188 	.word	0x08001188
 8000678:	08001188 	.word	0x08001188
 800067c:	08001188 	.word	0x08001188
 8000680:	0800118c 	.word	0x0800118c

08000684 <memset>:
 8000684:	4402      	add	r2, r0
 8000686:	4603      	mov	r3, r0
 8000688:	4293      	cmp	r3, r2
 800068a:	d100      	bne.n	800068e <memset+0xa>
 800068c:	4770      	bx	lr
 800068e:	f803 1b01 	strb.w	r1, [r3], #1
 8000692:	e7f9      	b.n	8000688 <memset+0x4>

08000694 <_puts_r>:
 8000694:	b570      	push	{r4, r5, r6, lr}
 8000696:	460e      	mov	r6, r1
 8000698:	4605      	mov	r5, r0
 800069a:	b118      	cbz	r0, 80006a4 <_puts_r+0x10>
 800069c:	6983      	ldr	r3, [r0, #24]
 800069e:	b90b      	cbnz	r3, 80006a4 <_puts_r+0x10>
 80006a0:	f000 fa44 	bl	8000b2c <__sinit>
 80006a4:	69ab      	ldr	r3, [r5, #24]
 80006a6:	68ac      	ldr	r4, [r5, #8]
 80006a8:	b913      	cbnz	r3, 80006b0 <_puts_r+0x1c>
 80006aa:	4628      	mov	r0, r5
 80006ac:	f000 fa3e 	bl	8000b2c <__sinit>
 80006b0:	4b2c      	ldr	r3, [pc, #176]	; (8000764 <_puts_r+0xd0>)
 80006b2:	429c      	cmp	r4, r3
 80006b4:	d120      	bne.n	80006f8 <_puts_r+0x64>
 80006b6:	686c      	ldr	r4, [r5, #4]
 80006b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006ba:	07db      	lsls	r3, r3, #31
 80006bc:	d405      	bmi.n	80006ca <_puts_r+0x36>
 80006be:	89a3      	ldrh	r3, [r4, #12]
 80006c0:	0598      	lsls	r0, r3, #22
 80006c2:	d402      	bmi.n	80006ca <_puts_r+0x36>
 80006c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80006c6:	f000 facf 	bl	8000c68 <__retarget_lock_acquire_recursive>
 80006ca:	89a3      	ldrh	r3, [r4, #12]
 80006cc:	0719      	lsls	r1, r3, #28
 80006ce:	d51d      	bpl.n	800070c <_puts_r+0x78>
 80006d0:	6923      	ldr	r3, [r4, #16]
 80006d2:	b1db      	cbz	r3, 800070c <_puts_r+0x78>
 80006d4:	3e01      	subs	r6, #1
 80006d6:	68a3      	ldr	r3, [r4, #8]
 80006d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006dc:	3b01      	subs	r3, #1
 80006de:	60a3      	str	r3, [r4, #8]
 80006e0:	bb39      	cbnz	r1, 8000732 <_puts_r+0x9e>
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	da38      	bge.n	8000758 <_puts_r+0xc4>
 80006e6:	4622      	mov	r2, r4
 80006e8:	210a      	movs	r1, #10
 80006ea:	4628      	mov	r0, r5
 80006ec:	f000 f848 	bl	8000780 <__swbuf_r>
 80006f0:	3001      	adds	r0, #1
 80006f2:	d011      	beq.n	8000718 <_puts_r+0x84>
 80006f4:	250a      	movs	r5, #10
 80006f6:	e011      	b.n	800071c <_puts_r+0x88>
 80006f8:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <_puts_r+0xd4>)
 80006fa:	429c      	cmp	r4, r3
 80006fc:	d101      	bne.n	8000702 <_puts_r+0x6e>
 80006fe:	68ac      	ldr	r4, [r5, #8]
 8000700:	e7da      	b.n	80006b8 <_puts_r+0x24>
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <_puts_r+0xd8>)
 8000704:	429c      	cmp	r4, r3
 8000706:	bf08      	it	eq
 8000708:	68ec      	ldreq	r4, [r5, #12]
 800070a:	e7d5      	b.n	80006b8 <_puts_r+0x24>
 800070c:	4621      	mov	r1, r4
 800070e:	4628      	mov	r0, r5
 8000710:	f000 f888 	bl	8000824 <__swsetup_r>
 8000714:	2800      	cmp	r0, #0
 8000716:	d0dd      	beq.n	80006d4 <_puts_r+0x40>
 8000718:	f04f 35ff 	mov.w	r5, #4294967295
 800071c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800071e:	07da      	lsls	r2, r3, #31
 8000720:	d405      	bmi.n	800072e <_puts_r+0x9a>
 8000722:	89a3      	ldrh	r3, [r4, #12]
 8000724:	059b      	lsls	r3, r3, #22
 8000726:	d402      	bmi.n	800072e <_puts_r+0x9a>
 8000728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800072a:	f000 fa9e 	bl	8000c6a <__retarget_lock_release_recursive>
 800072e:	4628      	mov	r0, r5
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	2b00      	cmp	r3, #0
 8000734:	da04      	bge.n	8000740 <_puts_r+0xac>
 8000736:	69a2      	ldr	r2, [r4, #24]
 8000738:	429a      	cmp	r2, r3
 800073a:	dc06      	bgt.n	800074a <_puts_r+0xb6>
 800073c:	290a      	cmp	r1, #10
 800073e:	d004      	beq.n	800074a <_puts_r+0xb6>
 8000740:	6823      	ldr	r3, [r4, #0]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	6022      	str	r2, [r4, #0]
 8000746:	7019      	strb	r1, [r3, #0]
 8000748:	e7c5      	b.n	80006d6 <_puts_r+0x42>
 800074a:	4622      	mov	r2, r4
 800074c:	4628      	mov	r0, r5
 800074e:	f000 f817 	bl	8000780 <__swbuf_r>
 8000752:	3001      	adds	r0, #1
 8000754:	d1bf      	bne.n	80006d6 <_puts_r+0x42>
 8000756:	e7df      	b.n	8000718 <_puts_r+0x84>
 8000758:	6823      	ldr	r3, [r4, #0]
 800075a:	250a      	movs	r5, #10
 800075c:	1c5a      	adds	r2, r3, #1
 800075e:	6022      	str	r2, [r4, #0]
 8000760:	701d      	strb	r5, [r3, #0]
 8000762:	e7db      	b.n	800071c <_puts_r+0x88>
 8000764:	08001148 	.word	0x08001148
 8000768:	08001168 	.word	0x08001168
 800076c:	08001128 	.word	0x08001128

08000770 <puts>:
 8000770:	4b02      	ldr	r3, [pc, #8]	; (800077c <puts+0xc>)
 8000772:	4601      	mov	r1, r0
 8000774:	6818      	ldr	r0, [r3, #0]
 8000776:	f7ff bf8d 	b.w	8000694 <_puts_r>
 800077a:	bf00      	nop
 800077c:	20000010 	.word	0x20000010

08000780 <__swbuf_r>:
 8000780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000782:	460e      	mov	r6, r1
 8000784:	4614      	mov	r4, r2
 8000786:	4605      	mov	r5, r0
 8000788:	b118      	cbz	r0, 8000792 <__swbuf_r+0x12>
 800078a:	6983      	ldr	r3, [r0, #24]
 800078c:	b90b      	cbnz	r3, 8000792 <__swbuf_r+0x12>
 800078e:	f000 f9cd 	bl	8000b2c <__sinit>
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <__swbuf_r+0x98>)
 8000794:	429c      	cmp	r4, r3
 8000796:	d12b      	bne.n	80007f0 <__swbuf_r+0x70>
 8000798:	686c      	ldr	r4, [r5, #4]
 800079a:	69a3      	ldr	r3, [r4, #24]
 800079c:	60a3      	str	r3, [r4, #8]
 800079e:	89a3      	ldrh	r3, [r4, #12]
 80007a0:	071a      	lsls	r2, r3, #28
 80007a2:	d52f      	bpl.n	8000804 <__swbuf_r+0x84>
 80007a4:	6923      	ldr	r3, [r4, #16]
 80007a6:	b36b      	cbz	r3, 8000804 <__swbuf_r+0x84>
 80007a8:	6923      	ldr	r3, [r4, #16]
 80007aa:	6820      	ldr	r0, [r4, #0]
 80007ac:	1ac0      	subs	r0, r0, r3
 80007ae:	6963      	ldr	r3, [r4, #20]
 80007b0:	b2f6      	uxtb	r6, r6
 80007b2:	4283      	cmp	r3, r0
 80007b4:	4637      	mov	r7, r6
 80007b6:	dc04      	bgt.n	80007c2 <__swbuf_r+0x42>
 80007b8:	4621      	mov	r1, r4
 80007ba:	4628      	mov	r0, r5
 80007bc:	f000 f922 	bl	8000a04 <_fflush_r>
 80007c0:	bb30      	cbnz	r0, 8000810 <__swbuf_r+0x90>
 80007c2:	68a3      	ldr	r3, [r4, #8]
 80007c4:	3b01      	subs	r3, #1
 80007c6:	60a3      	str	r3, [r4, #8]
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	6022      	str	r2, [r4, #0]
 80007ce:	701e      	strb	r6, [r3, #0]
 80007d0:	6963      	ldr	r3, [r4, #20]
 80007d2:	3001      	adds	r0, #1
 80007d4:	4283      	cmp	r3, r0
 80007d6:	d004      	beq.n	80007e2 <__swbuf_r+0x62>
 80007d8:	89a3      	ldrh	r3, [r4, #12]
 80007da:	07db      	lsls	r3, r3, #31
 80007dc:	d506      	bpl.n	80007ec <__swbuf_r+0x6c>
 80007de:	2e0a      	cmp	r6, #10
 80007e0:	d104      	bne.n	80007ec <__swbuf_r+0x6c>
 80007e2:	4621      	mov	r1, r4
 80007e4:	4628      	mov	r0, r5
 80007e6:	f000 f90d 	bl	8000a04 <_fflush_r>
 80007ea:	b988      	cbnz	r0, 8000810 <__swbuf_r+0x90>
 80007ec:	4638      	mov	r0, r7
 80007ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <__swbuf_r+0x9c>)
 80007f2:	429c      	cmp	r4, r3
 80007f4:	d101      	bne.n	80007fa <__swbuf_r+0x7a>
 80007f6:	68ac      	ldr	r4, [r5, #8]
 80007f8:	e7cf      	b.n	800079a <__swbuf_r+0x1a>
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <__swbuf_r+0xa0>)
 80007fc:	429c      	cmp	r4, r3
 80007fe:	bf08      	it	eq
 8000800:	68ec      	ldreq	r4, [r5, #12]
 8000802:	e7ca      	b.n	800079a <__swbuf_r+0x1a>
 8000804:	4621      	mov	r1, r4
 8000806:	4628      	mov	r0, r5
 8000808:	f000 f80c 	bl	8000824 <__swsetup_r>
 800080c:	2800      	cmp	r0, #0
 800080e:	d0cb      	beq.n	80007a8 <__swbuf_r+0x28>
 8000810:	f04f 37ff 	mov.w	r7, #4294967295
 8000814:	e7ea      	b.n	80007ec <__swbuf_r+0x6c>
 8000816:	bf00      	nop
 8000818:	08001148 	.word	0x08001148
 800081c:	08001168 	.word	0x08001168
 8000820:	08001128 	.word	0x08001128

08000824 <__swsetup_r>:
 8000824:	4b32      	ldr	r3, [pc, #200]	; (80008f0 <__swsetup_r+0xcc>)
 8000826:	b570      	push	{r4, r5, r6, lr}
 8000828:	681d      	ldr	r5, [r3, #0]
 800082a:	4606      	mov	r6, r0
 800082c:	460c      	mov	r4, r1
 800082e:	b125      	cbz	r5, 800083a <__swsetup_r+0x16>
 8000830:	69ab      	ldr	r3, [r5, #24]
 8000832:	b913      	cbnz	r3, 800083a <__swsetup_r+0x16>
 8000834:	4628      	mov	r0, r5
 8000836:	f000 f979 	bl	8000b2c <__sinit>
 800083a:	4b2e      	ldr	r3, [pc, #184]	; (80008f4 <__swsetup_r+0xd0>)
 800083c:	429c      	cmp	r4, r3
 800083e:	d10f      	bne.n	8000860 <__swsetup_r+0x3c>
 8000840:	686c      	ldr	r4, [r5, #4]
 8000842:	89a3      	ldrh	r3, [r4, #12]
 8000844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000848:	0719      	lsls	r1, r3, #28
 800084a:	d42c      	bmi.n	80008a6 <__swsetup_r+0x82>
 800084c:	06dd      	lsls	r5, r3, #27
 800084e:	d411      	bmi.n	8000874 <__swsetup_r+0x50>
 8000850:	2309      	movs	r3, #9
 8000852:	6033      	str	r3, [r6, #0]
 8000854:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000858:	81a3      	strh	r3, [r4, #12]
 800085a:	f04f 30ff 	mov.w	r0, #4294967295
 800085e:	e03e      	b.n	80008de <__swsetup_r+0xba>
 8000860:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <__swsetup_r+0xd4>)
 8000862:	429c      	cmp	r4, r3
 8000864:	d101      	bne.n	800086a <__swsetup_r+0x46>
 8000866:	68ac      	ldr	r4, [r5, #8]
 8000868:	e7eb      	b.n	8000842 <__swsetup_r+0x1e>
 800086a:	4b24      	ldr	r3, [pc, #144]	; (80008fc <__swsetup_r+0xd8>)
 800086c:	429c      	cmp	r4, r3
 800086e:	bf08      	it	eq
 8000870:	68ec      	ldreq	r4, [r5, #12]
 8000872:	e7e6      	b.n	8000842 <__swsetup_r+0x1e>
 8000874:	0758      	lsls	r0, r3, #29
 8000876:	d512      	bpl.n	800089e <__swsetup_r+0x7a>
 8000878:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800087a:	b141      	cbz	r1, 800088e <__swsetup_r+0x6a>
 800087c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000880:	4299      	cmp	r1, r3
 8000882:	d002      	beq.n	800088a <__swsetup_r+0x66>
 8000884:	4630      	mov	r0, r6
 8000886:	f000 fa57 	bl	8000d38 <_free_r>
 800088a:	2300      	movs	r3, #0
 800088c:	6363      	str	r3, [r4, #52]	; 0x34
 800088e:	89a3      	ldrh	r3, [r4, #12]
 8000890:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000894:	81a3      	strh	r3, [r4, #12]
 8000896:	2300      	movs	r3, #0
 8000898:	6063      	str	r3, [r4, #4]
 800089a:	6923      	ldr	r3, [r4, #16]
 800089c:	6023      	str	r3, [r4, #0]
 800089e:	89a3      	ldrh	r3, [r4, #12]
 80008a0:	f043 0308 	orr.w	r3, r3, #8
 80008a4:	81a3      	strh	r3, [r4, #12]
 80008a6:	6923      	ldr	r3, [r4, #16]
 80008a8:	b94b      	cbnz	r3, 80008be <__swsetup_r+0x9a>
 80008aa:	89a3      	ldrh	r3, [r4, #12]
 80008ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008b4:	d003      	beq.n	80008be <__swsetup_r+0x9a>
 80008b6:	4621      	mov	r1, r4
 80008b8:	4630      	mov	r0, r6
 80008ba:	f000 f9fd 	bl	8000cb8 <__smakebuf_r>
 80008be:	89a0      	ldrh	r0, [r4, #12]
 80008c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80008c4:	f010 0301 	ands.w	r3, r0, #1
 80008c8:	d00a      	beq.n	80008e0 <__swsetup_r+0xbc>
 80008ca:	2300      	movs	r3, #0
 80008cc:	60a3      	str	r3, [r4, #8]
 80008ce:	6963      	ldr	r3, [r4, #20]
 80008d0:	425b      	negs	r3, r3
 80008d2:	61a3      	str	r3, [r4, #24]
 80008d4:	6923      	ldr	r3, [r4, #16]
 80008d6:	b943      	cbnz	r3, 80008ea <__swsetup_r+0xc6>
 80008d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80008dc:	d1ba      	bne.n	8000854 <__swsetup_r+0x30>
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	0781      	lsls	r1, r0, #30
 80008e2:	bf58      	it	pl
 80008e4:	6963      	ldrpl	r3, [r4, #20]
 80008e6:	60a3      	str	r3, [r4, #8]
 80008e8:	e7f4      	b.n	80008d4 <__swsetup_r+0xb0>
 80008ea:	2000      	movs	r0, #0
 80008ec:	e7f7      	b.n	80008de <__swsetup_r+0xba>
 80008ee:	bf00      	nop
 80008f0:	20000010 	.word	0x20000010
 80008f4:	08001148 	.word	0x08001148
 80008f8:	08001168 	.word	0x08001168
 80008fc:	08001128 	.word	0x08001128

08000900 <__sflush_r>:
 8000900:	898a      	ldrh	r2, [r1, #12]
 8000902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000904:	4605      	mov	r5, r0
 8000906:	0710      	lsls	r0, r2, #28
 8000908:	460c      	mov	r4, r1
 800090a:	d457      	bmi.n	80009bc <__sflush_r+0xbc>
 800090c:	684b      	ldr	r3, [r1, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	dc04      	bgt.n	800091c <__sflush_r+0x1c>
 8000912:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000914:	2b00      	cmp	r3, #0
 8000916:	dc01      	bgt.n	800091c <__sflush_r+0x1c>
 8000918:	2000      	movs	r0, #0
 800091a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800091c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800091e:	2e00      	cmp	r6, #0
 8000920:	d0fa      	beq.n	8000918 <__sflush_r+0x18>
 8000922:	2300      	movs	r3, #0
 8000924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000928:	682f      	ldr	r7, [r5, #0]
 800092a:	602b      	str	r3, [r5, #0]
 800092c:	d032      	beq.n	8000994 <__sflush_r+0x94>
 800092e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000930:	89a3      	ldrh	r3, [r4, #12]
 8000932:	075a      	lsls	r2, r3, #29
 8000934:	d505      	bpl.n	8000942 <__sflush_r+0x42>
 8000936:	6863      	ldr	r3, [r4, #4]
 8000938:	1ac0      	subs	r0, r0, r3
 800093a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800093c:	b10b      	cbz	r3, 8000942 <__sflush_r+0x42>
 800093e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000940:	1ac0      	subs	r0, r0, r3
 8000942:	2300      	movs	r3, #0
 8000944:	4602      	mov	r2, r0
 8000946:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000948:	6a21      	ldr	r1, [r4, #32]
 800094a:	4628      	mov	r0, r5
 800094c:	47b0      	blx	r6
 800094e:	1c43      	adds	r3, r0, #1
 8000950:	89a3      	ldrh	r3, [r4, #12]
 8000952:	d106      	bne.n	8000962 <__sflush_r+0x62>
 8000954:	6829      	ldr	r1, [r5, #0]
 8000956:	291d      	cmp	r1, #29
 8000958:	d82c      	bhi.n	80009b4 <__sflush_r+0xb4>
 800095a:	4a29      	ldr	r2, [pc, #164]	; (8000a00 <__sflush_r+0x100>)
 800095c:	40ca      	lsrs	r2, r1
 800095e:	07d6      	lsls	r6, r2, #31
 8000960:	d528      	bpl.n	80009b4 <__sflush_r+0xb4>
 8000962:	2200      	movs	r2, #0
 8000964:	6062      	str	r2, [r4, #4]
 8000966:	04d9      	lsls	r1, r3, #19
 8000968:	6922      	ldr	r2, [r4, #16]
 800096a:	6022      	str	r2, [r4, #0]
 800096c:	d504      	bpl.n	8000978 <__sflush_r+0x78>
 800096e:	1c42      	adds	r2, r0, #1
 8000970:	d101      	bne.n	8000976 <__sflush_r+0x76>
 8000972:	682b      	ldr	r3, [r5, #0]
 8000974:	b903      	cbnz	r3, 8000978 <__sflush_r+0x78>
 8000976:	6560      	str	r0, [r4, #84]	; 0x54
 8000978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800097a:	602f      	str	r7, [r5, #0]
 800097c:	2900      	cmp	r1, #0
 800097e:	d0cb      	beq.n	8000918 <__sflush_r+0x18>
 8000980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000984:	4299      	cmp	r1, r3
 8000986:	d002      	beq.n	800098e <__sflush_r+0x8e>
 8000988:	4628      	mov	r0, r5
 800098a:	f000 f9d5 	bl	8000d38 <_free_r>
 800098e:	2000      	movs	r0, #0
 8000990:	6360      	str	r0, [r4, #52]	; 0x34
 8000992:	e7c2      	b.n	800091a <__sflush_r+0x1a>
 8000994:	6a21      	ldr	r1, [r4, #32]
 8000996:	2301      	movs	r3, #1
 8000998:	4628      	mov	r0, r5
 800099a:	47b0      	blx	r6
 800099c:	1c41      	adds	r1, r0, #1
 800099e:	d1c7      	bne.n	8000930 <__sflush_r+0x30>
 80009a0:	682b      	ldr	r3, [r5, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0c4      	beq.n	8000930 <__sflush_r+0x30>
 80009a6:	2b1d      	cmp	r3, #29
 80009a8:	d001      	beq.n	80009ae <__sflush_r+0xae>
 80009aa:	2b16      	cmp	r3, #22
 80009ac:	d101      	bne.n	80009b2 <__sflush_r+0xb2>
 80009ae:	602f      	str	r7, [r5, #0]
 80009b0:	e7b2      	b.n	8000918 <__sflush_r+0x18>
 80009b2:	89a3      	ldrh	r3, [r4, #12]
 80009b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009b8:	81a3      	strh	r3, [r4, #12]
 80009ba:	e7ae      	b.n	800091a <__sflush_r+0x1a>
 80009bc:	690f      	ldr	r7, [r1, #16]
 80009be:	2f00      	cmp	r7, #0
 80009c0:	d0aa      	beq.n	8000918 <__sflush_r+0x18>
 80009c2:	0793      	lsls	r3, r2, #30
 80009c4:	680e      	ldr	r6, [r1, #0]
 80009c6:	bf08      	it	eq
 80009c8:	694b      	ldreq	r3, [r1, #20]
 80009ca:	600f      	str	r7, [r1, #0]
 80009cc:	bf18      	it	ne
 80009ce:	2300      	movne	r3, #0
 80009d0:	1bf6      	subs	r6, r6, r7
 80009d2:	608b      	str	r3, [r1, #8]
 80009d4:	2e00      	cmp	r6, #0
 80009d6:	dd9f      	ble.n	8000918 <__sflush_r+0x18>
 80009d8:	6a21      	ldr	r1, [r4, #32]
 80009da:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80009de:	4633      	mov	r3, r6
 80009e0:	463a      	mov	r2, r7
 80009e2:	4628      	mov	r0, r5
 80009e4:	47e0      	blx	ip
 80009e6:	2800      	cmp	r0, #0
 80009e8:	dc06      	bgt.n	80009f8 <__sflush_r+0xf8>
 80009ea:	89a3      	ldrh	r3, [r4, #12]
 80009ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f0:	81a3      	strh	r3, [r4, #12]
 80009f2:	f04f 30ff 	mov.w	r0, #4294967295
 80009f6:	e790      	b.n	800091a <__sflush_r+0x1a>
 80009f8:	4407      	add	r7, r0
 80009fa:	1a36      	subs	r6, r6, r0
 80009fc:	e7ea      	b.n	80009d4 <__sflush_r+0xd4>
 80009fe:	bf00      	nop
 8000a00:	20400001 	.word	0x20400001

08000a04 <_fflush_r>:
 8000a04:	b538      	push	{r3, r4, r5, lr}
 8000a06:	690b      	ldr	r3, [r1, #16]
 8000a08:	4605      	mov	r5, r0
 8000a0a:	460c      	mov	r4, r1
 8000a0c:	b913      	cbnz	r3, 8000a14 <_fflush_r+0x10>
 8000a0e:	2500      	movs	r5, #0
 8000a10:	4628      	mov	r0, r5
 8000a12:	bd38      	pop	{r3, r4, r5, pc}
 8000a14:	b118      	cbz	r0, 8000a1e <_fflush_r+0x1a>
 8000a16:	6983      	ldr	r3, [r0, #24]
 8000a18:	b90b      	cbnz	r3, 8000a1e <_fflush_r+0x1a>
 8000a1a:	f000 f887 	bl	8000b2c <__sinit>
 8000a1e:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <_fflush_r+0x6c>)
 8000a20:	429c      	cmp	r4, r3
 8000a22:	d11b      	bne.n	8000a5c <_fflush_r+0x58>
 8000a24:	686c      	ldr	r4, [r5, #4]
 8000a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0ef      	beq.n	8000a0e <_fflush_r+0xa>
 8000a2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a30:	07d0      	lsls	r0, r2, #31
 8000a32:	d404      	bmi.n	8000a3e <_fflush_r+0x3a>
 8000a34:	0599      	lsls	r1, r3, #22
 8000a36:	d402      	bmi.n	8000a3e <_fflush_r+0x3a>
 8000a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a3a:	f000 f915 	bl	8000c68 <__retarget_lock_acquire_recursive>
 8000a3e:	4628      	mov	r0, r5
 8000a40:	4621      	mov	r1, r4
 8000a42:	f7ff ff5d 	bl	8000900 <__sflush_r>
 8000a46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a48:	07da      	lsls	r2, r3, #31
 8000a4a:	4605      	mov	r5, r0
 8000a4c:	d4e0      	bmi.n	8000a10 <_fflush_r+0xc>
 8000a4e:	89a3      	ldrh	r3, [r4, #12]
 8000a50:	059b      	lsls	r3, r3, #22
 8000a52:	d4dd      	bmi.n	8000a10 <_fflush_r+0xc>
 8000a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a56:	f000 f908 	bl	8000c6a <__retarget_lock_release_recursive>
 8000a5a:	e7d9      	b.n	8000a10 <_fflush_r+0xc>
 8000a5c:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <_fflush_r+0x70>)
 8000a5e:	429c      	cmp	r4, r3
 8000a60:	d101      	bne.n	8000a66 <_fflush_r+0x62>
 8000a62:	68ac      	ldr	r4, [r5, #8]
 8000a64:	e7df      	b.n	8000a26 <_fflush_r+0x22>
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <_fflush_r+0x74>)
 8000a68:	429c      	cmp	r4, r3
 8000a6a:	bf08      	it	eq
 8000a6c:	68ec      	ldreq	r4, [r5, #12]
 8000a6e:	e7da      	b.n	8000a26 <_fflush_r+0x22>
 8000a70:	08001148 	.word	0x08001148
 8000a74:	08001168 	.word	0x08001168
 8000a78:	08001128 	.word	0x08001128

08000a7c <std>:
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	b510      	push	{r4, lr}
 8000a80:	4604      	mov	r4, r0
 8000a82:	e9c0 3300 	strd	r3, r3, [r0]
 8000a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a8a:	6083      	str	r3, [r0, #8]
 8000a8c:	8181      	strh	r1, [r0, #12]
 8000a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8000a90:	81c2      	strh	r2, [r0, #14]
 8000a92:	6183      	str	r3, [r0, #24]
 8000a94:	4619      	mov	r1, r3
 8000a96:	2208      	movs	r2, #8
 8000a98:	305c      	adds	r0, #92	; 0x5c
 8000a9a:	f7ff fdf3 	bl	8000684 <memset>
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <std+0x38>)
 8000aa0:	6263      	str	r3, [r4, #36]	; 0x24
 8000aa2:	4b05      	ldr	r3, [pc, #20]	; (8000ab8 <std+0x3c>)
 8000aa4:	62a3      	str	r3, [r4, #40]	; 0x28
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <std+0x40>)
 8000aa8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000aaa:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <std+0x44>)
 8000aac:	6224      	str	r4, [r4, #32]
 8000aae:	6323      	str	r3, [r4, #48]	; 0x30
 8000ab0:	bd10      	pop	{r4, pc}
 8000ab2:	bf00      	nop
 8000ab4:	08000f15 	.word	0x08000f15
 8000ab8:	08000f37 	.word	0x08000f37
 8000abc:	08000f6f 	.word	0x08000f6f
 8000ac0:	08000f93 	.word	0x08000f93

08000ac4 <_cleanup_r>:
 8000ac4:	4901      	ldr	r1, [pc, #4]	; (8000acc <_cleanup_r+0x8>)
 8000ac6:	f000 b8af 	b.w	8000c28 <_fwalk_reent>
 8000aca:	bf00      	nop
 8000acc:	08000a05 	.word	0x08000a05

08000ad0 <__sfmoreglue>:
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	2268      	movs	r2, #104	; 0x68
 8000ad4:	1e4d      	subs	r5, r1, #1
 8000ad6:	4355      	muls	r5, r2
 8000ad8:	460e      	mov	r6, r1
 8000ada:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000ade:	f000 f995 	bl	8000e0c <_malloc_r>
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	b140      	cbz	r0, 8000af8 <__sfmoreglue+0x28>
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	e9c0 1600 	strd	r1, r6, [r0]
 8000aec:	300c      	adds	r0, #12
 8000aee:	60a0      	str	r0, [r4, #8]
 8000af0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000af4:	f7ff fdc6 	bl	8000684 <memset>
 8000af8:	4620      	mov	r0, r4
 8000afa:	bd70      	pop	{r4, r5, r6, pc}

08000afc <__sfp_lock_acquire>:
 8000afc:	4801      	ldr	r0, [pc, #4]	; (8000b04 <__sfp_lock_acquire+0x8>)
 8000afe:	f000 b8b3 	b.w	8000c68 <__retarget_lock_acquire_recursive>
 8000b02:	bf00      	nop
 8000b04:	200000a9 	.word	0x200000a9

08000b08 <__sfp_lock_release>:
 8000b08:	4801      	ldr	r0, [pc, #4]	; (8000b10 <__sfp_lock_release+0x8>)
 8000b0a:	f000 b8ae 	b.w	8000c6a <__retarget_lock_release_recursive>
 8000b0e:	bf00      	nop
 8000b10:	200000a9 	.word	0x200000a9

08000b14 <__sinit_lock_acquire>:
 8000b14:	4801      	ldr	r0, [pc, #4]	; (8000b1c <__sinit_lock_acquire+0x8>)
 8000b16:	f000 b8a7 	b.w	8000c68 <__retarget_lock_acquire_recursive>
 8000b1a:	bf00      	nop
 8000b1c:	200000aa 	.word	0x200000aa

08000b20 <__sinit_lock_release>:
 8000b20:	4801      	ldr	r0, [pc, #4]	; (8000b28 <__sinit_lock_release+0x8>)
 8000b22:	f000 b8a2 	b.w	8000c6a <__retarget_lock_release_recursive>
 8000b26:	bf00      	nop
 8000b28:	200000aa 	.word	0x200000aa

08000b2c <__sinit>:
 8000b2c:	b510      	push	{r4, lr}
 8000b2e:	4604      	mov	r4, r0
 8000b30:	f7ff fff0 	bl	8000b14 <__sinit_lock_acquire>
 8000b34:	69a3      	ldr	r3, [r4, #24]
 8000b36:	b11b      	cbz	r3, 8000b40 <__sinit+0x14>
 8000b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b3c:	f7ff bff0 	b.w	8000b20 <__sinit_lock_release>
 8000b40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b44:	6523      	str	r3, [r4, #80]	; 0x50
 8000b46:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <__sinit+0x68>)
 8000b48:	4a13      	ldr	r2, [pc, #76]	; (8000b98 <__sinit+0x6c>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b4e:	42a3      	cmp	r3, r4
 8000b50:	bf04      	itt	eq
 8000b52:	2301      	moveq	r3, #1
 8000b54:	61a3      	streq	r3, [r4, #24]
 8000b56:	4620      	mov	r0, r4
 8000b58:	f000 f820 	bl	8000b9c <__sfp>
 8000b5c:	6060      	str	r0, [r4, #4]
 8000b5e:	4620      	mov	r0, r4
 8000b60:	f000 f81c 	bl	8000b9c <__sfp>
 8000b64:	60a0      	str	r0, [r4, #8]
 8000b66:	4620      	mov	r0, r4
 8000b68:	f000 f818 	bl	8000b9c <__sfp>
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	60e0      	str	r0, [r4, #12]
 8000b70:	2104      	movs	r1, #4
 8000b72:	6860      	ldr	r0, [r4, #4]
 8000b74:	f7ff ff82 	bl	8000a7c <std>
 8000b78:	68a0      	ldr	r0, [r4, #8]
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	2109      	movs	r1, #9
 8000b7e:	f7ff ff7d 	bl	8000a7c <std>
 8000b82:	68e0      	ldr	r0, [r4, #12]
 8000b84:	2202      	movs	r2, #2
 8000b86:	2112      	movs	r1, #18
 8000b88:	f7ff ff78 	bl	8000a7c <std>
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	61a3      	str	r3, [r4, #24]
 8000b90:	e7d2      	b.n	8000b38 <__sinit+0xc>
 8000b92:	bf00      	nop
 8000b94:	08001124 	.word	0x08001124
 8000b98:	08000ac5 	.word	0x08000ac5

08000b9c <__sfp>:
 8000b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b9e:	4607      	mov	r7, r0
 8000ba0:	f7ff ffac 	bl	8000afc <__sfp_lock_acquire>
 8000ba4:	4b1e      	ldr	r3, [pc, #120]	; (8000c20 <__sfp+0x84>)
 8000ba6:	681e      	ldr	r6, [r3, #0]
 8000ba8:	69b3      	ldr	r3, [r6, #24]
 8000baa:	b913      	cbnz	r3, 8000bb2 <__sfp+0x16>
 8000bac:	4630      	mov	r0, r6
 8000bae:	f7ff ffbd 	bl	8000b2c <__sinit>
 8000bb2:	3648      	adds	r6, #72	; 0x48
 8000bb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000bb8:	3b01      	subs	r3, #1
 8000bba:	d503      	bpl.n	8000bc4 <__sfp+0x28>
 8000bbc:	6833      	ldr	r3, [r6, #0]
 8000bbe:	b30b      	cbz	r3, 8000c04 <__sfp+0x68>
 8000bc0:	6836      	ldr	r6, [r6, #0]
 8000bc2:	e7f7      	b.n	8000bb4 <__sfp+0x18>
 8000bc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000bc8:	b9d5      	cbnz	r5, 8000c00 <__sfp+0x64>
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <__sfp+0x88>)
 8000bcc:	60e3      	str	r3, [r4, #12]
 8000bce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000bd2:	6665      	str	r5, [r4, #100]	; 0x64
 8000bd4:	f000 f847 	bl	8000c66 <__retarget_lock_init_recursive>
 8000bd8:	f7ff ff96 	bl	8000b08 <__sfp_lock_release>
 8000bdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000be0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000be4:	6025      	str	r5, [r4, #0]
 8000be6:	61a5      	str	r5, [r4, #24]
 8000be8:	2208      	movs	r2, #8
 8000bea:	4629      	mov	r1, r5
 8000bec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000bf0:	f7ff fd48 	bl	8000684 <memset>
 8000bf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000bf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c00:	3468      	adds	r4, #104	; 0x68
 8000c02:	e7d9      	b.n	8000bb8 <__sfp+0x1c>
 8000c04:	2104      	movs	r1, #4
 8000c06:	4638      	mov	r0, r7
 8000c08:	f7ff ff62 	bl	8000ad0 <__sfmoreglue>
 8000c0c:	4604      	mov	r4, r0
 8000c0e:	6030      	str	r0, [r6, #0]
 8000c10:	2800      	cmp	r0, #0
 8000c12:	d1d5      	bne.n	8000bc0 <__sfp+0x24>
 8000c14:	f7ff ff78 	bl	8000b08 <__sfp_lock_release>
 8000c18:	230c      	movs	r3, #12
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	e7ee      	b.n	8000bfc <__sfp+0x60>
 8000c1e:	bf00      	nop
 8000c20:	08001124 	.word	0x08001124
 8000c24:	ffff0001 	.word	0xffff0001

08000c28 <_fwalk_reent>:
 8000c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c2c:	4606      	mov	r6, r0
 8000c2e:	4688      	mov	r8, r1
 8000c30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c34:	2700      	movs	r7, #0
 8000c36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c3a:	f1b9 0901 	subs.w	r9, r9, #1
 8000c3e:	d505      	bpl.n	8000c4c <_fwalk_reent+0x24>
 8000c40:	6824      	ldr	r4, [r4, #0]
 8000c42:	2c00      	cmp	r4, #0
 8000c44:	d1f7      	bne.n	8000c36 <_fwalk_reent+0xe>
 8000c46:	4638      	mov	r0, r7
 8000c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c4c:	89ab      	ldrh	r3, [r5, #12]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d907      	bls.n	8000c62 <_fwalk_reent+0x3a>
 8000c52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c56:	3301      	adds	r3, #1
 8000c58:	d003      	beq.n	8000c62 <_fwalk_reent+0x3a>
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	47c0      	blx	r8
 8000c60:	4307      	orrs	r7, r0
 8000c62:	3568      	adds	r5, #104	; 0x68
 8000c64:	e7e9      	b.n	8000c3a <_fwalk_reent+0x12>

08000c66 <__retarget_lock_init_recursive>:
 8000c66:	4770      	bx	lr

08000c68 <__retarget_lock_acquire_recursive>:
 8000c68:	4770      	bx	lr

08000c6a <__retarget_lock_release_recursive>:
 8000c6a:	4770      	bx	lr

08000c6c <__swhatbuf_r>:
 8000c6c:	b570      	push	{r4, r5, r6, lr}
 8000c6e:	460e      	mov	r6, r1
 8000c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c74:	2900      	cmp	r1, #0
 8000c76:	b096      	sub	sp, #88	; 0x58
 8000c78:	4614      	mov	r4, r2
 8000c7a:	461d      	mov	r5, r3
 8000c7c:	da08      	bge.n	8000c90 <__swhatbuf_r+0x24>
 8000c7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000c82:	2200      	movs	r2, #0
 8000c84:	602a      	str	r2, [r5, #0]
 8000c86:	061a      	lsls	r2, r3, #24
 8000c88:	d410      	bmi.n	8000cac <__swhatbuf_r+0x40>
 8000c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8e:	e00e      	b.n	8000cae <__swhatbuf_r+0x42>
 8000c90:	466a      	mov	r2, sp
 8000c92:	f000 f9a5 	bl	8000fe0 <_fstat_r>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	dbf1      	blt.n	8000c7e <__swhatbuf_r+0x12>
 8000c9a:	9a01      	ldr	r2, [sp, #4]
 8000c9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000ca0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000ca4:	425a      	negs	r2, r3
 8000ca6:	415a      	adcs	r2, r3
 8000ca8:	602a      	str	r2, [r5, #0]
 8000caa:	e7ee      	b.n	8000c8a <__swhatbuf_r+0x1e>
 8000cac:	2340      	movs	r3, #64	; 0x40
 8000cae:	2000      	movs	r0, #0
 8000cb0:	6023      	str	r3, [r4, #0]
 8000cb2:	b016      	add	sp, #88	; 0x58
 8000cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000cb8 <__smakebuf_r>:
 8000cb8:	898b      	ldrh	r3, [r1, #12]
 8000cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000cbc:	079d      	lsls	r5, r3, #30
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460c      	mov	r4, r1
 8000cc2:	d507      	bpl.n	8000cd4 <__smakebuf_r+0x1c>
 8000cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000cc8:	6023      	str	r3, [r4, #0]
 8000cca:	6123      	str	r3, [r4, #16]
 8000ccc:	2301      	movs	r3, #1
 8000cce:	6163      	str	r3, [r4, #20]
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd70      	pop	{r4, r5, r6, pc}
 8000cd4:	ab01      	add	r3, sp, #4
 8000cd6:	466a      	mov	r2, sp
 8000cd8:	f7ff ffc8 	bl	8000c6c <__swhatbuf_r>
 8000cdc:	9900      	ldr	r1, [sp, #0]
 8000cde:	4605      	mov	r5, r0
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	f000 f893 	bl	8000e0c <_malloc_r>
 8000ce6:	b948      	cbnz	r0, 8000cfc <__smakebuf_r+0x44>
 8000ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cec:	059a      	lsls	r2, r3, #22
 8000cee:	d4ef      	bmi.n	8000cd0 <__smakebuf_r+0x18>
 8000cf0:	f023 0303 	bic.w	r3, r3, #3
 8000cf4:	f043 0302 	orr.w	r3, r3, #2
 8000cf8:	81a3      	strh	r3, [r4, #12]
 8000cfa:	e7e3      	b.n	8000cc4 <__smakebuf_r+0xc>
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <__smakebuf_r+0x7c>)
 8000cfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d00:	89a3      	ldrh	r3, [r4, #12]
 8000d02:	6020      	str	r0, [r4, #0]
 8000d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d08:	81a3      	strh	r3, [r4, #12]
 8000d0a:	9b00      	ldr	r3, [sp, #0]
 8000d0c:	6163      	str	r3, [r4, #20]
 8000d0e:	9b01      	ldr	r3, [sp, #4]
 8000d10:	6120      	str	r0, [r4, #16]
 8000d12:	b15b      	cbz	r3, 8000d2c <__smakebuf_r+0x74>
 8000d14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d18:	4630      	mov	r0, r6
 8000d1a:	f000 f973 	bl	8001004 <_isatty_r>
 8000d1e:	b128      	cbz	r0, 8000d2c <__smakebuf_r+0x74>
 8000d20:	89a3      	ldrh	r3, [r4, #12]
 8000d22:	f023 0303 	bic.w	r3, r3, #3
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	81a3      	strh	r3, [r4, #12]
 8000d2c:	89a0      	ldrh	r0, [r4, #12]
 8000d2e:	4305      	orrs	r5, r0
 8000d30:	81a5      	strh	r5, [r4, #12]
 8000d32:	e7cd      	b.n	8000cd0 <__smakebuf_r+0x18>
 8000d34:	08000ac5 	.word	0x08000ac5

08000d38 <_free_r>:
 8000d38:	b538      	push	{r3, r4, r5, lr}
 8000d3a:	4605      	mov	r5, r0
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	d041      	beq.n	8000dc4 <_free_r+0x8c>
 8000d40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d44:	1f0c      	subs	r4, r1, #4
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	bfb8      	it	lt
 8000d4a:	18e4      	addlt	r4, r4, r3
 8000d4c:	f000 f97c 	bl	8001048 <__malloc_lock>
 8000d50:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <_free_r+0x90>)
 8000d52:	6813      	ldr	r3, [r2, #0]
 8000d54:	b933      	cbnz	r3, 8000d64 <_free_r+0x2c>
 8000d56:	6063      	str	r3, [r4, #4]
 8000d58:	6014      	str	r4, [r2, #0]
 8000d5a:	4628      	mov	r0, r5
 8000d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d60:	f000 b978 	b.w	8001054 <__malloc_unlock>
 8000d64:	42a3      	cmp	r3, r4
 8000d66:	d908      	bls.n	8000d7a <_free_r+0x42>
 8000d68:	6820      	ldr	r0, [r4, #0]
 8000d6a:	1821      	adds	r1, r4, r0
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	bf01      	itttt	eq
 8000d70:	6819      	ldreq	r1, [r3, #0]
 8000d72:	685b      	ldreq	r3, [r3, #4]
 8000d74:	1809      	addeq	r1, r1, r0
 8000d76:	6021      	streq	r1, [r4, #0]
 8000d78:	e7ed      	b.n	8000d56 <_free_r+0x1e>
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	b10b      	cbz	r3, 8000d84 <_free_r+0x4c>
 8000d80:	42a3      	cmp	r3, r4
 8000d82:	d9fa      	bls.n	8000d7a <_free_r+0x42>
 8000d84:	6811      	ldr	r1, [r2, #0]
 8000d86:	1850      	adds	r0, r2, r1
 8000d88:	42a0      	cmp	r0, r4
 8000d8a:	d10b      	bne.n	8000da4 <_free_r+0x6c>
 8000d8c:	6820      	ldr	r0, [r4, #0]
 8000d8e:	4401      	add	r1, r0
 8000d90:	1850      	adds	r0, r2, r1
 8000d92:	4283      	cmp	r3, r0
 8000d94:	6011      	str	r1, [r2, #0]
 8000d96:	d1e0      	bne.n	8000d5a <_free_r+0x22>
 8000d98:	6818      	ldr	r0, [r3, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	6053      	str	r3, [r2, #4]
 8000d9e:	4401      	add	r1, r0
 8000da0:	6011      	str	r1, [r2, #0]
 8000da2:	e7da      	b.n	8000d5a <_free_r+0x22>
 8000da4:	d902      	bls.n	8000dac <_free_r+0x74>
 8000da6:	230c      	movs	r3, #12
 8000da8:	602b      	str	r3, [r5, #0]
 8000daa:	e7d6      	b.n	8000d5a <_free_r+0x22>
 8000dac:	6820      	ldr	r0, [r4, #0]
 8000dae:	1821      	adds	r1, r4, r0
 8000db0:	428b      	cmp	r3, r1
 8000db2:	bf04      	itt	eq
 8000db4:	6819      	ldreq	r1, [r3, #0]
 8000db6:	685b      	ldreq	r3, [r3, #4]
 8000db8:	6063      	str	r3, [r4, #4]
 8000dba:	bf04      	itt	eq
 8000dbc:	1809      	addeq	r1, r1, r0
 8000dbe:	6021      	streq	r1, [r4, #0]
 8000dc0:	6054      	str	r4, [r2, #4]
 8000dc2:	e7ca      	b.n	8000d5a <_free_r+0x22>
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200000ac 	.word	0x200000ac

08000dcc <sbrk_aligned>:
 8000dcc:	b570      	push	{r4, r5, r6, lr}
 8000dce:	4e0e      	ldr	r6, [pc, #56]	; (8000e08 <sbrk_aligned+0x3c>)
 8000dd0:	460c      	mov	r4, r1
 8000dd2:	6831      	ldr	r1, [r6, #0]
 8000dd4:	4605      	mov	r5, r0
 8000dd6:	b911      	cbnz	r1, 8000dde <sbrk_aligned+0x12>
 8000dd8:	f000 f88c 	bl	8000ef4 <_sbrk_r>
 8000ddc:	6030      	str	r0, [r6, #0]
 8000dde:	4621      	mov	r1, r4
 8000de0:	4628      	mov	r0, r5
 8000de2:	f000 f887 	bl	8000ef4 <_sbrk_r>
 8000de6:	1c43      	adds	r3, r0, #1
 8000de8:	d00a      	beq.n	8000e00 <sbrk_aligned+0x34>
 8000dea:	1cc4      	adds	r4, r0, #3
 8000dec:	f024 0403 	bic.w	r4, r4, #3
 8000df0:	42a0      	cmp	r0, r4
 8000df2:	d007      	beq.n	8000e04 <sbrk_aligned+0x38>
 8000df4:	1a21      	subs	r1, r4, r0
 8000df6:	4628      	mov	r0, r5
 8000df8:	f000 f87c 	bl	8000ef4 <_sbrk_r>
 8000dfc:	3001      	adds	r0, #1
 8000dfe:	d101      	bne.n	8000e04 <sbrk_aligned+0x38>
 8000e00:	f04f 34ff 	mov.w	r4, #4294967295
 8000e04:	4620      	mov	r0, r4
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
 8000e08:	200000b0 	.word	0x200000b0

08000e0c <_malloc_r>:
 8000e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e10:	1ccd      	adds	r5, r1, #3
 8000e12:	f025 0503 	bic.w	r5, r5, #3
 8000e16:	3508      	adds	r5, #8
 8000e18:	2d0c      	cmp	r5, #12
 8000e1a:	bf38      	it	cc
 8000e1c:	250c      	movcc	r5, #12
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	4607      	mov	r7, r0
 8000e22:	db01      	blt.n	8000e28 <_malloc_r+0x1c>
 8000e24:	42a9      	cmp	r1, r5
 8000e26:	d905      	bls.n	8000e34 <_malloc_r+0x28>
 8000e28:	230c      	movs	r3, #12
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	4630      	mov	r0, r6
 8000e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e34:	4e2e      	ldr	r6, [pc, #184]	; (8000ef0 <_malloc_r+0xe4>)
 8000e36:	f000 f907 	bl	8001048 <__malloc_lock>
 8000e3a:	6833      	ldr	r3, [r6, #0]
 8000e3c:	461c      	mov	r4, r3
 8000e3e:	bb34      	cbnz	r4, 8000e8e <_malloc_r+0x82>
 8000e40:	4629      	mov	r1, r5
 8000e42:	4638      	mov	r0, r7
 8000e44:	f7ff ffc2 	bl	8000dcc <sbrk_aligned>
 8000e48:	1c43      	adds	r3, r0, #1
 8000e4a:	4604      	mov	r4, r0
 8000e4c:	d14d      	bne.n	8000eea <_malloc_r+0xde>
 8000e4e:	6834      	ldr	r4, [r6, #0]
 8000e50:	4626      	mov	r6, r4
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d140      	bne.n	8000ed8 <_malloc_r+0xcc>
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	4631      	mov	r1, r6
 8000e5a:	4638      	mov	r0, r7
 8000e5c:	eb04 0803 	add.w	r8, r4, r3
 8000e60:	f000 f848 	bl	8000ef4 <_sbrk_r>
 8000e64:	4580      	cmp	r8, r0
 8000e66:	d13a      	bne.n	8000ede <_malloc_r+0xd2>
 8000e68:	6821      	ldr	r1, [r4, #0]
 8000e6a:	3503      	adds	r5, #3
 8000e6c:	1a6d      	subs	r5, r5, r1
 8000e6e:	f025 0503 	bic.w	r5, r5, #3
 8000e72:	3508      	adds	r5, #8
 8000e74:	2d0c      	cmp	r5, #12
 8000e76:	bf38      	it	cc
 8000e78:	250c      	movcc	r5, #12
 8000e7a:	4629      	mov	r1, r5
 8000e7c:	4638      	mov	r0, r7
 8000e7e:	f7ff ffa5 	bl	8000dcc <sbrk_aligned>
 8000e82:	3001      	adds	r0, #1
 8000e84:	d02b      	beq.n	8000ede <_malloc_r+0xd2>
 8000e86:	6823      	ldr	r3, [r4, #0]
 8000e88:	442b      	add	r3, r5
 8000e8a:	6023      	str	r3, [r4, #0]
 8000e8c:	e00e      	b.n	8000eac <_malloc_r+0xa0>
 8000e8e:	6822      	ldr	r2, [r4, #0]
 8000e90:	1b52      	subs	r2, r2, r5
 8000e92:	d41e      	bmi.n	8000ed2 <_malloc_r+0xc6>
 8000e94:	2a0b      	cmp	r2, #11
 8000e96:	d916      	bls.n	8000ec6 <_malloc_r+0xba>
 8000e98:	1961      	adds	r1, r4, r5
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	6025      	str	r5, [r4, #0]
 8000e9e:	bf18      	it	ne
 8000ea0:	6059      	strne	r1, [r3, #4]
 8000ea2:	6863      	ldr	r3, [r4, #4]
 8000ea4:	bf08      	it	eq
 8000ea6:	6031      	streq	r1, [r6, #0]
 8000ea8:	5162      	str	r2, [r4, r5]
 8000eaa:	604b      	str	r3, [r1, #4]
 8000eac:	4638      	mov	r0, r7
 8000eae:	f104 060b 	add.w	r6, r4, #11
 8000eb2:	f000 f8cf 	bl	8001054 <__malloc_unlock>
 8000eb6:	f026 0607 	bic.w	r6, r6, #7
 8000eba:	1d23      	adds	r3, r4, #4
 8000ebc:	1af2      	subs	r2, r6, r3
 8000ebe:	d0b6      	beq.n	8000e2e <_malloc_r+0x22>
 8000ec0:	1b9b      	subs	r3, r3, r6
 8000ec2:	50a3      	str	r3, [r4, r2]
 8000ec4:	e7b3      	b.n	8000e2e <_malloc_r+0x22>
 8000ec6:	6862      	ldr	r2, [r4, #4]
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	bf0c      	ite	eq
 8000ecc:	6032      	streq	r2, [r6, #0]
 8000ece:	605a      	strne	r2, [r3, #4]
 8000ed0:	e7ec      	b.n	8000eac <_malloc_r+0xa0>
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	6864      	ldr	r4, [r4, #4]
 8000ed6:	e7b2      	b.n	8000e3e <_malloc_r+0x32>
 8000ed8:	4634      	mov	r4, r6
 8000eda:	6876      	ldr	r6, [r6, #4]
 8000edc:	e7b9      	b.n	8000e52 <_malloc_r+0x46>
 8000ede:	230c      	movs	r3, #12
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	4638      	mov	r0, r7
 8000ee4:	f000 f8b6 	bl	8001054 <__malloc_unlock>
 8000ee8:	e7a1      	b.n	8000e2e <_malloc_r+0x22>
 8000eea:	6025      	str	r5, [r4, #0]
 8000eec:	e7de      	b.n	8000eac <_malloc_r+0xa0>
 8000eee:	bf00      	nop
 8000ef0:	200000ac 	.word	0x200000ac

08000ef4 <_sbrk_r>:
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	4d06      	ldr	r5, [pc, #24]	; (8000f10 <_sbrk_r+0x1c>)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	4604      	mov	r4, r0
 8000efc:	4608      	mov	r0, r1
 8000efe:	602b      	str	r3, [r5, #0]
 8000f00:	f7ff fb36 	bl	8000570 <_sbrk>
 8000f04:	1c43      	adds	r3, r0, #1
 8000f06:	d102      	bne.n	8000f0e <_sbrk_r+0x1a>
 8000f08:	682b      	ldr	r3, [r5, #0]
 8000f0a:	b103      	cbz	r3, 8000f0e <_sbrk_r+0x1a>
 8000f0c:	6023      	str	r3, [r4, #0]
 8000f0e:	bd38      	pop	{r3, r4, r5, pc}
 8000f10:	200000b4 	.word	0x200000b4

08000f14 <__sread>:
 8000f14:	b510      	push	{r4, lr}
 8000f16:	460c      	mov	r4, r1
 8000f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f1c:	f000 f8a0 	bl	8001060 <_read_r>
 8000f20:	2800      	cmp	r0, #0
 8000f22:	bfab      	itete	ge
 8000f24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f26:	89a3      	ldrhlt	r3, [r4, #12]
 8000f28:	181b      	addge	r3, r3, r0
 8000f2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f2e:	bfac      	ite	ge
 8000f30:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f32:	81a3      	strhlt	r3, [r4, #12]
 8000f34:	bd10      	pop	{r4, pc}

08000f36 <__swrite>:
 8000f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f3a:	461f      	mov	r7, r3
 8000f3c:	898b      	ldrh	r3, [r1, #12]
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	4605      	mov	r5, r0
 8000f42:	460c      	mov	r4, r1
 8000f44:	4616      	mov	r6, r2
 8000f46:	d505      	bpl.n	8000f54 <__swrite+0x1e>
 8000f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f000 f868 	bl	8001024 <_lseek_r>
 8000f54:	89a3      	ldrh	r3, [r4, #12]
 8000f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f5e:	81a3      	strh	r3, [r4, #12]
 8000f60:	4632      	mov	r2, r6
 8000f62:	463b      	mov	r3, r7
 8000f64:	4628      	mov	r0, r5
 8000f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f6a:	f000 b817 	b.w	8000f9c <_write_r>

08000f6e <__sseek>:
 8000f6e:	b510      	push	{r4, lr}
 8000f70:	460c      	mov	r4, r1
 8000f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f76:	f000 f855 	bl	8001024 <_lseek_r>
 8000f7a:	1c43      	adds	r3, r0, #1
 8000f7c:	89a3      	ldrh	r3, [r4, #12]
 8000f7e:	bf15      	itete	ne
 8000f80:	6560      	strne	r0, [r4, #84]	; 0x54
 8000f82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000f86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000f8a:	81a3      	strheq	r3, [r4, #12]
 8000f8c:	bf18      	it	ne
 8000f8e:	81a3      	strhne	r3, [r4, #12]
 8000f90:	bd10      	pop	{r4, pc}

08000f92 <__sclose>:
 8000f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f96:	f000 b813 	b.w	8000fc0 <_close_r>
	...

08000f9c <_write_r>:
 8000f9c:	b538      	push	{r3, r4, r5, lr}
 8000f9e:	4d07      	ldr	r5, [pc, #28]	; (8000fbc <_write_r+0x20>)
 8000fa0:	4604      	mov	r4, r0
 8000fa2:	4608      	mov	r0, r1
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	602a      	str	r2, [r5, #0]
 8000faa:	461a      	mov	r2, r3
 8000fac:	f7ff fa93 	bl	80004d6 <_write>
 8000fb0:	1c43      	adds	r3, r0, #1
 8000fb2:	d102      	bne.n	8000fba <_write_r+0x1e>
 8000fb4:	682b      	ldr	r3, [r5, #0]
 8000fb6:	b103      	cbz	r3, 8000fba <_write_r+0x1e>
 8000fb8:	6023      	str	r3, [r4, #0]
 8000fba:	bd38      	pop	{r3, r4, r5, pc}
 8000fbc:	200000b4 	.word	0x200000b4

08000fc0 <_close_r>:
 8000fc0:	b538      	push	{r3, r4, r5, lr}
 8000fc2:	4d06      	ldr	r5, [pc, #24]	; (8000fdc <_close_r+0x1c>)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	4604      	mov	r4, r0
 8000fc8:	4608      	mov	r0, r1
 8000fca:	602b      	str	r3, [r5, #0]
 8000fcc:	f7ff fa9f 	bl	800050e <_close>
 8000fd0:	1c43      	adds	r3, r0, #1
 8000fd2:	d102      	bne.n	8000fda <_close_r+0x1a>
 8000fd4:	682b      	ldr	r3, [r5, #0]
 8000fd6:	b103      	cbz	r3, 8000fda <_close_r+0x1a>
 8000fd8:	6023      	str	r3, [r4, #0]
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	200000b4 	.word	0x200000b4

08000fe0 <_fstat_r>:
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	4d07      	ldr	r5, [pc, #28]	; (8001000 <_fstat_r+0x20>)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	4608      	mov	r0, r1
 8000fea:	4611      	mov	r1, r2
 8000fec:	602b      	str	r3, [r5, #0]
 8000fee:	f7ff fa99 	bl	8000524 <_fstat>
 8000ff2:	1c43      	adds	r3, r0, #1
 8000ff4:	d102      	bne.n	8000ffc <_fstat_r+0x1c>
 8000ff6:	682b      	ldr	r3, [r5, #0]
 8000ff8:	b103      	cbz	r3, 8000ffc <_fstat_r+0x1c>
 8000ffa:	6023      	str	r3, [r4, #0]
 8000ffc:	bd38      	pop	{r3, r4, r5, pc}
 8000ffe:	bf00      	nop
 8001000:	200000b4 	.word	0x200000b4

08001004 <_isatty_r>:
 8001004:	b538      	push	{r3, r4, r5, lr}
 8001006:	4d06      	ldr	r5, [pc, #24]	; (8001020 <_isatty_r+0x1c>)
 8001008:	2300      	movs	r3, #0
 800100a:	4604      	mov	r4, r0
 800100c:	4608      	mov	r0, r1
 800100e:	602b      	str	r3, [r5, #0]
 8001010:	f7ff fa97 	bl	8000542 <_isatty>
 8001014:	1c43      	adds	r3, r0, #1
 8001016:	d102      	bne.n	800101e <_isatty_r+0x1a>
 8001018:	682b      	ldr	r3, [r5, #0]
 800101a:	b103      	cbz	r3, 800101e <_isatty_r+0x1a>
 800101c:	6023      	str	r3, [r4, #0]
 800101e:	bd38      	pop	{r3, r4, r5, pc}
 8001020:	200000b4 	.word	0x200000b4

08001024 <_lseek_r>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	4d07      	ldr	r5, [pc, #28]	; (8001044 <_lseek_r+0x20>)
 8001028:	4604      	mov	r4, r0
 800102a:	4608      	mov	r0, r1
 800102c:	4611      	mov	r1, r2
 800102e:	2200      	movs	r2, #0
 8001030:	602a      	str	r2, [r5, #0]
 8001032:	461a      	mov	r2, r3
 8001034:	f7ff fa8f 	bl	8000556 <_lseek>
 8001038:	1c43      	adds	r3, r0, #1
 800103a:	d102      	bne.n	8001042 <_lseek_r+0x1e>
 800103c:	682b      	ldr	r3, [r5, #0]
 800103e:	b103      	cbz	r3, 8001042 <_lseek_r+0x1e>
 8001040:	6023      	str	r3, [r4, #0]
 8001042:	bd38      	pop	{r3, r4, r5, pc}
 8001044:	200000b4 	.word	0x200000b4

08001048 <__malloc_lock>:
 8001048:	4801      	ldr	r0, [pc, #4]	; (8001050 <__malloc_lock+0x8>)
 800104a:	f7ff be0d 	b.w	8000c68 <__retarget_lock_acquire_recursive>
 800104e:	bf00      	nop
 8001050:	200000a8 	.word	0x200000a8

08001054 <__malloc_unlock>:
 8001054:	4801      	ldr	r0, [pc, #4]	; (800105c <__malloc_unlock+0x8>)
 8001056:	f7ff be08 	b.w	8000c6a <__retarget_lock_release_recursive>
 800105a:	bf00      	nop
 800105c:	200000a8 	.word	0x200000a8

08001060 <_read_r>:
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	4d07      	ldr	r5, [pc, #28]	; (8001080 <_read_r+0x20>)
 8001064:	4604      	mov	r4, r0
 8001066:	4608      	mov	r0, r1
 8001068:	4611      	mov	r1, r2
 800106a:	2200      	movs	r2, #0
 800106c:	602a      	str	r2, [r5, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	f7ff fa14 	bl	800049c <_read>
 8001074:	1c43      	adds	r3, r0, #1
 8001076:	d102      	bne.n	800107e <_read_r+0x1e>
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	b103      	cbz	r3, 800107e <_read_r+0x1e>
 800107c:	6023      	str	r3, [r4, #0]
 800107e:	bd38      	pop	{r3, r4, r5, pc}
 8001080:	200000b4 	.word	0x200000b4

08001084 <_init>:
 8001084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001086:	bf00      	nop
 8001088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800108a:	bc08      	pop	{r3}
 800108c:	469e      	mov	lr, r3
 800108e:	4770      	bx	lr

08001090 <_fini>:
 8001090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001092:	bf00      	nop
 8001094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001096:	bc08      	pop	{r3}
 8001098:	469e      	mov	lr, r3
 800109a:	4770      	bx	lr
