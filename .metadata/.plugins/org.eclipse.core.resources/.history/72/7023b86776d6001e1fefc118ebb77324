/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#include "main.h"
#include "led.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void task1_handler(void);   //this is task 1
void task2_handler(void);   //this is task 2
void task3_handler(void);   //this is task 3
void task4_handler(void);   //this is task 4

void init_systick_timer(uint32_t tick_hz);
/*function without ASM prologue and epilogue; use only with ASM instructions */
__attribute__((naked)) void init_sheduler_stack(uint32_t sched_top_of_stack);
void init_task_stack(void);
void enable_processor_faults(void);
__attribute__((naked)) void switch_sp_to_psp(void);
uint32_t get_psp_value(void);

uint32_t psp_of_tasks[MAX_TASKS] = {T1_STACK_START, T2_STACK_START, T3_STACK_START, T4_STACK_START}; //program counters of tasks
uint32_t task_handlers[MAX_TASKS];
uint8_t current_task = 0; //task1 is running

int main(void)
{
	enable_processor_faults();

    init_sheduler_stack(SCHED_STACK_START);

    task_handlers[0] = (uint32_t) task1_handler;
    task_handlers[1] = (uint32_t) task2_handler;
    task_handlers[2] = (uint32_t) task3_handler;
    task_handlers[3] = (uint32_t) task4_handler;

    init_task_stack();

    init_systick_timer(TICK_HZ);

    led_init_all();

    switch_sp_to_psp();

    task1_handler();

	for(;;);
}

void task1_handler(void)
{
	while(1)
	{
		led_on(LED_GREEN);
		delay(DELAY_COUNT_1S);
		led_off(LED_GREEN);
		delay(DELAY_COUNT_1S);
	}
}

void task2_handler(void)
{
	while(1)
	{
		led_on(LED_ORANGE);
		delay(DELAY_COUNT_500MS);
		led_off(LED_ORANGE);
		delay(DELAY_COUNT_500MS);
	}
}

void task3_handler(void)
{
	while(1)
	{
		led_on(LED_BLUE);
		delay(DELAY_COUNT_250MS);
		led_off(LED_BLUE);
		delay(DELAY_COUNT_250MS);
	}
}

void task4_handler(void)
{
	while(1)
	{
		led_on(LED_RED);
		delay(DELAY_COUNT_125MS);
		led_off(LED_RED);
		delay(DELAY_COUNT_125MS);
	}
}

void init_systick_timer(uint32_t tick_hz)
{
	uint32_t *pSRVR = (uint32_t*)0xE000E014; //pointer to SysTick Reload Value Register
	uint32_t *pSCSR = (uint32_t*)0xE000E010; //pointer to SysTick Control and Status Register
	uint32_t count_value = (SYSTICK_TIM_CLK/tick_hz) - 1; //N-1 cycles, interrupt happens when register reloads

	// Clear value of SVR
	*pSRVR &= ~(0x00FFFFFFFF); //clearing value of register; mask taken from datasheet

	//load value into SVR
	*pSRVR |= count_value; //load value into register

	// do some settings
	*pSCSR |= (1 << 1); //Enables SysTick exception request; set bit 1 to 1
	*pSCSR |= (1 << 2); //Enables SysTick TICKINT, interrupt after reaching 0 ; set bit 2 to 1
	//enable the systick
	*pSCSR |= (1 << 0); //Enables SysTick; set bit 0 to 1
	// look for Systick_Handler in startup_stm32f407vgtx.s file
}

///Initialize scheduler stack pointer (MSP)//
__attribute__((naked)) void init_sheduler_stack(uint32_t sched_top_of_stack)
{
	__asm volatile("MSR MSP,%0": : "r" (sched_top_of_stack) : );
	__asm volatile("BX LR");
}

void init_task_stack(void)
{
	uint32_t *pPSP;

	for(int i=0; i< MAX_TASKS; i++)
	{
		pPSP = (uint32_t*) psp_of_tasks[i];
		pPSP--;
		*pPSP = DUMMY_XPSR; // 0x00100000; value from datasheet; T bit always 1

		//PC
		pPSP--;
		*pPSP = task_handlers[i];

		//LR
		pPSP--;
		*pPSP = 0xFFFFFFFD;

		for(int j = 0; j<13; j++)
		{
			pPSP--;
			*pPSP = 0;
		}

		psp_of_tasks[i] = (uint32_t) pPSP;



	}
}

void enable_processor_faults(void)
{
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
	*pSHCSR |= (1<<16); //mem manage
	*pSHCSR |= (1<<17); //bus fault
	*pSHCSR |= (1<<18); //usage fault
}

uint32_t get_psp_value(void)
{
	return psp_of_tasks[current_task];
}

void save_psp_value(uint32_t current_psp_value)
{
	psp_of_tasks[current_task] = current_psp_value;
}

void update_next_task(void)
{
	current_task++;
	current_task %= MAX_TASKS; //clever module operand to check if crossed MAX_TASKS
}

__attribute__((naked)) void switch_sp_to_psp(void)
{
	// 1. Initialize the PSP with TASK1 stack start address
	// get the value of psp of current task
	__asm volatile ("PUSH {LR}"); // preserve LR which connects back to main()
	__asm volatile ("BL get_psp_value");
	__asm volatile ("MSR PSP, R0"); //initialize PSP
	__asm volatile ("POP {LR}"); //pops back LR value

	//2. change SP to PSP using CONTROL register
	__asm volatile ("MOV R0, #0X02");
	__asm volatile ("MSR CONTROL, R0");
	__asm volatile ("BX LR");

}

__attribute__((naked)) void SysTick_Handler(void)
{
	/*Save the context of current task*/

	//1. Get current running task PSP value
	__asm volatile("MRS R0, PSP");
	//2. Using that PSP value store SF2(R4 to R11)
	__asm volatile("STMDB R0!, {R4-R11}");
	__asm volatile("PUSH {LR}");
	//3. Save the current value of PSP
	__asm volatile("BL save_psp_value");

	/*Retrieve the context of next task*/

	//1. Decide next task to run
	__asm volatile("BL update_next_task");
	//2. get its past PSP value
	__asm volatile ("BL get_psp_value");
	//3. Using that PSP value retrieve SF2(r4 to R11)
	__asm volatile ("LDMIA R0!,{R4-R11}");
	//4. update PSP and exit
	__asm volatile ("MSR PSP, R0");
	__asm volatile ("POP {LR}");
	__asm volatile("BX LR");

}

void HardFault_Handler(void)
{
	printf("Exception : Hardfault\n");
	while(1);
}

void MemManage_Handler(void)
{
	printf("Exception : MemManage\n");
	while(1);
}

void BusFault_Handler(void)
{
	printf("Exception : BusFault\n");
	while(1);
}
